#include <iostream>
#include <vector>
using namespace std;

const int GRID_SIZE = 9; // Size of the Sudoku grid

// Function to print the Sudoku grid
void printSudoku(const vector<vector<int>>& sudoku) {
    for (int i = 0; i < GRID_SIZE; ++i) {
        for (int j = 0; j < GRID_SIZE; ++j) {
            cout << sudoku[i][j] << " ";
        }
        cout << endl;
    }
}

// Function to check if it's safe to place 'number' at cell (row, col)
bool isSafe(vector<vector<int>>& sudoku, int row, int col, int number) {
    // Check the row and column
    for (int i = 0; i < GRID_SIZE; ++i) {
        if (sudoku[row][i] == number || sudoku[i][col] == number) {
            return false;
        }
    }

    // Check the 3x3 box
    int boxRowStart = row - row % 3;
    int boxColStart = col - col % 3;
    for (int i = 0; i < 3; ++i) {
        for (int j = 0; j < 3; ++j) {
            if (sudoku[boxRowStart + i][boxColStart + j] == number) {
                return false;
            }
        }
    }

    return true;
}

// Function to solve Sudoku using backtracking
bool solveSudoku(vector<vector<int>>& sudoku) {
    for (int row = 0; row < GRID_SIZE; ++row) {
        for (int col = 0; col < GRID_SIZE; ++col) {
            // Find an empty cell
            if (sudoku[row][col] == 0) {
                for (int num = 1; num <= 9; ++num) {
                    if (isSafe(sudoku, row, col, num)) {
                        sudoku[row][col] = num;
                        if (solveSudoku(sudoku)) {
                            return true; // If it leads to a solution
                        }
                        sudoku[row][col] = 0; // If it doesn't lead to a solution, backtrack
                    }
                }
                return false; // If no number can be placed, backtrack further
            }
        }
    }
    return true; // All cells are filled
}

int main() {
    vector<vector<int>> sudoku(GRID_SIZE, vector<int>(GRID_SIZE, 0));

    // Input Sudoku grid from user
    cout << "Enter the Sudoku grid (" << GRID_SIZE << "x" << GRID_SIZE << "):" << endl;
    for (int i = 0; i < GRID_SIZE; ++i) {
        for (int j = 0; j < GRID_SIZE; ++j) {
            cin >> sudoku[i][j];
        }
    }

    // Solve Sudoku
    if (solveSudoku(sudoku)) {
        cout << "Sudoku solved:" << endl;
        printSudoku(sudoku);
    } else {
        cout << "No solution exists." << endl;
    }

    return 0;
}
